<%- include('partials/header.ejs'); %> <% if (typeof message != 'undefined') { %>
<div><%= message %></div>
<% } %>
<% if (typeof data == 'undefined') { %>
<h1>First time here?</h1>
<h3>
    You will need to link up a Shopify store before you will be able to access the
    full capabilities of this application.
</h3>
<p>Click <a href="../settings">here</a> to get started.</p>
<img src="../gif/moving_right_along.gif">
<% } else { %>
<h1>Welcome back!</h1>
<h3>Here are some recent sales figures.</h3>
<div id="my_dataviz"></div>
<% } %>
<script type="text/javascript">

    // Setup svg using Bostock's margin convention
    
    var margin = {top: 60, right: 160, bottom: 35, left: 30};
    
    var width = 1460 - margin.left - margin.right,
        height = 700 - margin.top - margin.bottom;
    
    var svg = d3.select("#my_dataviz")
      .append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    
    
      
    var data = '<%-JSON.stringify(data)%>';
    data = JSON.parse(data);
    console.log(data);
   
    // Transpose the data into layers
    var dataset = d3.layout.stack()(["Body Aware UK", "XDress", "Body Aware", "Epic Leopard", "XDress UK", "AIUS", "AIUK"].map(function(store) {
      return data.map(function(d) {
        return {x: d.sales_date, y: +d[store]};
      });
    }));

    var dailyTotal = d3.nest()
      .key(function(d){return d.sales_date})
      .rollup(function(leaves){
        return d3.sum(leaves, function(d) {return d3.sum(d3.values(d))});
      })
      .entries(data);     
    
    // Set x, y and colors
    var x = d3.scale.ordinal()
      .domain(dataset[0].map(function(d) { return d.x; }))
      .rangeRoundBands([10, width-10], 0.15);
    
    var y = d3.scale.linear()
      .domain([0, d3.max(dataset, function(d) {  return d3.max(d, function(d) { return d.y0 + d.y; });  })])
      .range([height, 0]);
    
    function colorGen() {
      var letters = '0123456789abcdef';
      var hastag = ['#','#','#','#','#','#','#'];
        for (let i=0;i<6;i++){
          hastag[i]+=letters[Math.floor(Math.random() *16)];
          hastag[i]+=letters[Math.floor(Math.random() *16)];
          hastag[i]+=letters[Math.floor(Math.random() *16)];
          hastag[i]+=letters[Math.floor(Math.random() *16)];
          hastag[i]+=letters[Math.floor(Math.random() *16)];
          hastag[i]+=letters[Math.floor(Math.random() *16)];
        }
      return hastag;
    }

    var colors = colorGen();
    
    
    // Define and draw axes
    var yAxis = d3.svg.axis()
      .scale(y)
      .orient("left")
      .ticks(5)
      .tickSize(-width, 0, 0)
      .tickFormat( function(d) { return d } );
    
    var xAxis = d3.svg.axis()
      .scale(x)
      .orient("bottom");
    
    svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);
    
    svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);
    
    
    // Create groups for each series, rects for each segment 
    var groups = svg.selectAll("g.cost")
      .data(dataset)
      .enter().append("g")
      .attr("class", "cost")
      .style("fill", function(d, i) { return colors[i]; });
    
    var rect = groups.selectAll("rect")
      .data(function(d) { return d; })
      .enter()
      .append("rect")
      .attr("x", function(d) { return x(d.x); })
      .attr("y", function(d) { return y(d.y0 + d.y); })
      .attr("height", function(d) { return y(d.y0) - y(d.y0 + d.y); })
      .attr("width", x.rangeBand())
      .on("mouseover", function() { tooltip.style("display", null); })
      .on("mouseout", function() { tooltip.style("display", "none"); })
      .on("mousemove", function(d) {
        var xPosition = d3.mouse(this)[0] - 15;
        var yPosition = d3.mouse(this)[1] - 25;
        tooltip.attr("transform", "translate(" + xPosition + "," + yPosition + ")");
        tooltip.select("text").text("$" + d3.format(",.2f")(d.y));
      });

    columns = svg.append("g")
      .selectAll("text").data(dailyTotal)
      .enter().append("text")
      .attr("x", function(d){
        return x(d.key) + x.rangeBand()/2
      })
      .attr("y", function(d) {
        return y(d.values);
      })
      .attr("dy", "-1em")
      .attr('style', 'font-size:10px')
      .text( function (d){
        return "$" + d3.format(",.2f")(d.values);
      })
      .style({fill: 'black', "text-anchor": "middle"});
    
    // Draw legend
    var legend = svg.selectAll(".legend")
      .data(colors)
      .enter().append("g")
      .attr("class", "legend")
      .attr("transform", function(d, i) { return "translate(30," + i * 19 + ")"; });
     
    legend.append("rect")
      .attr("x", width - 18)
      .attr("width", 18)
      .attr("height", 18)
      .style("fill", function(d, i) {return colors.slice().reverse()[i];});
     
    legend.append("text")
      .attr("x", width + 5)
      .attr("y", 9)
      .attr("dy", ".35em")
      .style("text-anchor", "start")
      .text(function(d, i) { 
        switch (i) {
          case 0: return "AIUK";
          case 1: return "AIUS";
          case 2: return "XDress UK";
	  case 3: return "Epic Leopard";
          case 4: return "Body Aware";
          case 5: return "XDress";
          case 6: return "Body Aware UK";
        }
      });
    
    
    // Prep the tooltip bits, initial display is hidden
    var tooltip = svg.append("g")
      .attr("class", "tooltip")
      .style("display", "none");
        
    tooltip.append("rect")
      .attr("width", 60)
      .attr("height", 20)
      .attr("fill", "white")
      .style("stroke", "black");
    
    tooltip.append("text")
      .attr("x", 30)
      .attr("dy", "1.2em")
      .style("text-anchor", "middle")
      .attr("font-size", "12px")
      .attr("font-weight", "bold");
    
    </script>
<%- include('partials/footer.ejs'); %>
